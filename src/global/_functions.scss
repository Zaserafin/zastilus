// Lighten a color: mix a color with white
@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Darken a color: mix a color with black
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

// Get the contrast color of a color
@function color-contrast($color) {
  // Get the RGB color components of the background color
  $r: calc(red($color) / 255);
  $g: calc(green($color) / 255);
  $b: calc(blue($color) / 255);

  // Calculate the contrast between the background color and black and white
  $luminance: 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
  $contrast-white: abs($luminance - 1);
  $contrast-black: $luminance;

  // Return text color based on contrast
  @if $contrast-white >= $contrast-black {
    @return $white;
  } @else {
    @return $black;
  }
}

// Devuelve el valor del breakpoint correspondiente o nulo si es el menor
@function get_breakpoint_min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @if type-of($min) != "number" {
    @warn "Breakpoint '#{$name}' not found in provided breakpoints map.";
    @return null;
  }
  @return if($min != 0, $min, null);
}

// Devuelve el nombre del breakpoint o nulo si es el menor
@function get_breakpoint_suffix($name, $breakpoints) {
  @return if(get_breakpoint_min($name, $breakpoints) == null, "", "-#{$name}");
}

@function calculate-column-width($column) {
  @return percentage(calc($column / $grid-total-columns));
}
